README
assignment-1.01

This week I started work on the dungeon. Some things to note:
	I have a few different structs going on, dungeon, and rooms.
	initDungeon(int,int,int) is the most complex function thus far, initializing variables and building the dungeon.
	connectRooms(dungeon,room,int) is the workhorse for connecting the rooms.
	getUnvisited(dungeon,int,int,int,int) runs my version of Dijykstra's algorithm for connecting rooms.

assignment-1.02

For this assignment, I created 2 functions: save_dungeon, and load_dungeon. Each does their perscribed function, and when put together you load and then save the same function. There's not a whole lot of action going on visually in the program, but it's pretty sweet that I can save all the data to recreate
the dungeon and more in ~61 kbytes.

assignment-1.03

The important functions this week are move_npcs and find_next. In main.c i run move_npc 100 times, and it finds the next move for the npc towards the player. I started using a priority queue, but it was taking more time than giving values to nodes around the dungeon, especially with lots of npcs.

**NOTE: when running use the flag --monsters=<num_monsters> to have an npc show up while running **

assignment-1.04

The main functions in this assignment are move_npc, find_*. Here I added in movement and detection for differnt npc types. Also, note that the game is partially working in ncurses. Most of the notable code for that is inside print_dungeon. Other things I worked on are in remove_npc, and the two collisions functions.

assignment-1.05

This week I worked mostly in the resolve action function and the main function. The resolve_action function takes the value from getch() and decides which values to change based on a list of #defined values in main.h. I also changed the print function to work with look mode. Finally, I added an array of character nodes so that collision detection could be in constant time.

assignment-1.06

For this assignment, almost everthing is in load_dungeon and save_dungeon within main.c. I mostly added on to the existing code there. Other changes were in the definition of npc's and in init_npc.

assignment-1.07

This week I added roll.h, roll.cpp, monster.h, monster.cpp, file_reader.h, and file_reader.cpp. Most of the logic is in file_reader for parsing the monster files. Another cool thing to note is the rolls have a function that evaluates them.

assignment-1.08

For this assignment, I created the parse_item function which goes through the item file looking for the keywords. The item template itself has functions for getting and setting values, and the parsing methods are in file_reader.

assignment-1.09

This week saw changes across the code. I had to refactor npc.h, dungeon.h, and their c files. I created middle.h as an interface between c and c++ code. This way both types can inlude the code, and c++ can implement it while c still calls it.

assignment-1.10

This week I modified mostly main.cpp, dungeon.c and player.c. Most of my changes were extending existing code, but I added functions in player.c for managing items. In the main file I altered how the GUI displayed items. I also messed with some collision detection in dungeon since the new combat system changes some of the rules.